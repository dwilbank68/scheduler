<!DOCTYPE html>
<html>
<head>
  <title>Scheduler</title>
  <link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css">
  <%= stylesheet_link_tag    'application', media: 'all' %>
  <%= javascript_include_tag 'application' %>
  <%= csrf_meta_tags %>
  <!--<meta http-equiv="refresh" content="300">   &lt;!&ndash; until I get realtime push updates working &ndash;&gt;-->
  <meta charset="utf-8"/>
</head>
<body>

<ul class='nav nav-tabs'>
  <div id="clock" class="quicksand-light white-glow-dim larger spaced"></div>
  <div id="timezone" class="quicksand-light white-glow-dim lowered spaced"><%= current_user.timezone if current_user %></div>
  <div id="new-unit">
    <%= link_to("New Unit", new_unit_path, class: 'quicksand-light white-glow-dim spaced') %>
  </div>
  <div id="notice" class="notice gold-glow-no-bg quicksand-reg spaced"><%= notice %></div>
  <div id="alert"  class="alert   red-glow-no-bg quicksand-reg spaced"><%= alert %></div>
  <div class="pull-right user-info">
    <% if current_user %>
        <div class="quicksand-light spaced white-glow-dim" id="name-display"><%= current_user.name %></div>
        <%= image_tag(current_user.avatar.tiny.url) if current_user.avatar? %>
        <button id="<%= current_user.id %>" class="header-button quicksand-light spaced white-glow-dim">Edit Contact Preferences</button>
        <%= link_to edit_user_registration_path, class: 'btn btn-primary btn-sm' do %>
            <span class="glyphicon glyphicon-user"></span>
        <% end %>
        <%= link_to destroy_user_session_path, method: :delete, class: 'btn btn-primary btn-sm' do %>
            <span class="glyphicon glyphicon-log-out"></span>
        <% end %>
    <% else %>
        <%= link_to "Sign In", new_user_session_path %> or
        <%= link_to "Sign Up", new_user_registration_path %>
    <% end %>
  </div>

</ul>

<div id="blur-layer">
  <%= yield %>
</div>

<div id="overlay"></div>

<div id="non-blur-layer">
  <div class="container microgramma-bold spaced" id="user-edit-form">
    <div class="row">
      <div class="col-xs-12 spaced3-6 txt-centered"> <h2>Contact Preferences</h2> </div>
    </div>
    <% if current_user %>
        <%= simple_form_for current_user, defaults: {input_html: {class: 'quicksand-reg white-glow-dim', color: 'white'}} do |f| %>
            <div class="row"><div class="col-xs-12"><%= f.error_notification %></div></div>
            <div class="row border-bottom">
              <div class="col-xs-1"></div>
              <div class="col-xs-7"><%= f.input :name, label: false, placeholder: 'name', input_html: { :style => 'width: 260px'} %></div>
              <div class="col-xs-2 quicksand-reg txt-right gold-glow                                        name-visible">visible</div>
              <div class="col-xs-2 quicksand-reg txt-right gold-glow                                        name-active">- - - -</div>
            </div>
            <div class="row border-bottom">
              <div class="col-xs-1"><i class="fa fa-envelope-o"></i></div>
              <div class="col-xs-7"> <%= f.input :email, label: false, placeholder: 'email', input_html: { :style => 'width: 260px' } %> </div>
              <div class="contact-switch col-xs-2 quicksand-reg txt-right <%= contact_colors(current_user)[:email1_vis] %> email1-visible">visible</div>
              <div class="contact-switch col-xs-2 quicksand-reg txt-right <%= contact_colors(current_user)[:email1_act] %> email1-active">active</div>
            </div>
            <div class="row border-bottom">
              <div class="col-xs-1"><i class="fa fa-envelope-o"></i></div>
              <div class="col-xs-7"> <%= f.input :email2, label: false, placeholder: 'alternate email', input_html: {id: 'email2', :style => 'width: 260px'} %> </div>
              <div class="contact-switch col-xs-2 quicksand-reg txt-right <%= contact_colors(current_user)[:email2_vis] %> email2-visible">visible</div>
              <div class="contact-switch col-xs-2 quicksand-reg txt-right <%= contact_colors(current_user)[:email2_act] %> email2-active">active</div>
            </div>
            <div class="row border-bottom">
              <div class="col-xs-1"><i class="fa fa-phone-square"></i></div>
              <div class="col-xs-7"> <%= f.input :phone, label: false, placeholder: 'phone', input_html: {id: 'phone', :style => 'width: 260px'} %> </div>
              <div class="contact-switch col-xs-2 quicksand-reg txt-right <%= contact_colors(current_user)[:phone1_vis] %> phone1-visible">visible</div>
              <div class="contact-switch col-xs-2 quicksand-reg txt-right <%= contact_colors(current_user)[:phone1_act] %> phone1-active">active</div>
            </div>
            <div class="row border-bottom">
              <div class="col-xs-1"><i class="fa fa-phone-square"></i></div>
              <div class="col-xs-7"> <%= f.input :phone2, label: false, placeholder: 'alternate phone', input_html: {id: 'phone2', :style => 'width: 260px'} %> </div>
              <div class="contact-switch col-xs-2 quicksand-reg txt-right <%= contact_colors(current_user)[:phone2_vis] %> phone2-visible">visible</div>
              <div class="contact-switch col-xs-2 quicksand-reg txt-right <%= contact_colors(current_user)[:phone2_act] %> phone2-active">active</div>
            </div>
            <div class="row border-bottom">
              <div class="col-xs-12"><%= f.input :timezone, :collection => ActiveSupport::TimeZone.all, :label_method => :to_s, :value_method => :name, :include_blank => false %></div>
            </div>
            <div class="spacer"></div>
            <div class="spacer"></div>
            <% if current_user.avatar? %>
                <div class="row">
                  <div class="col-xs-6 current-avatar-label"> Current Avatar </div>
                  <div class="col-xs-6"> <%= image_tag( current_user.avatar.profile.url ) %> </div>
                </div>
            <% end %>
            <div class="row border-bottom">
              <div class="col-xs-6 microgramma spaced white-glow-dim"> <%= f.file_field :avatar %> </div>
            </div>
            <%= f.hidden_field :avatar_cache %>
            <%= f.input :contact_flags, :as => :hidden, :input_html => { :value => current_user.contact_flags, :id => 'contact-flags-' + current_user.id.to_s } %>
            <div class="row">
              <div class="col-xs-12"> <%= f.error :base %> </div>
            </div>
            <div class="spacer"></div>
            <div class="txt-centered spaced"><%= f.button :submit, :class => 'update-user spaced' %></div>
            <div class="spacer"></div>
        <% end %>
    <% end %>
  </div>
</div> <!-- where the modal form attaches -->


</body>
</html>


<script>

    $(document).ready(function() {

        current_user_name = '<%= current_user.name %>';

        $('#clock').jsclock(); //http://www.tcpweb.com.br/JS-Clock/

        var $user_form = $('#user-edit-form');
        $('#overlay').hide();

        // set listener on "Edit Contact Preferences" in the upper right nav bar
        <% if current_user %>
        $('#<%= current_user.id %>').on('click', function(){
            if($('.signin').is(':visible')) {
                console.log("not gonna show two forms at the same time, sir");
            } else {
                prepareUserForm();
                // detach form from machine unit and reattach it to non-blurring layer, which is z-index 2
                $('#non-blur-layer').append($user_form);
                // blur the container which holds all the machines ( z-index 0)
                $('#blur-layer').removeClass('blur-out');
                $('#blur-layer').addClass('blur-in');
                // bring in the tinted overlay to prevent click-through
                $('#overlay').fadeIn();
                // bring in the form, which SHOULD BE Z-INDEX 3
                $user_form.fadeIn().css({top:($(window).height()/2)-107, left:($(window).width()/2)-200, zIndex:999});
            }
        });
        <% end %>

        // start all the countdowns on the units - showing the times until unit is free
        updatePage();
        setInterval(updatePage,15000);
    });

    var updatePage = function() {
//        refreshAllUnits();
        $.ajax({
            url: "/units/unit_statuses",
            type: "GET",
            dataType: "json",
            success: function (data) {
                if (editInProgress()) {
                    console.log('edit in progress - skipping updatePage');
                } else {
                    startUnitCountdowns(data);
                    updateUnitTimeCompleteFields(data);
                    adjustCountdownColors(data);
                    cleanUpUnitUsers(data);
                    updateUnitUsers(data);
                    markDisabledUnits(data);
                    setListenersOnUnitUsers(data);
                }
            },
            error: function () {
                'ajax error in #updatePage'
            }
        })
    };

    // set current values for all Unit countdown displays
    // this function receives a complete JSON dump as its argument from updatePage()
    var startUnitCountdowns = function(data) {
        unit_arr = data;
        for(var i=0; i < unit_arr.length; i++) {
            var id = unit_arr[i]['id'];
            var endTime = unit_arr[i]['time_available'];
            var endTimeMoment = moment(endTime);
            var $countdown = $('#time-remaining-' + id);
            if(endTime === null) {
                $countdown.html("<span>--:--:--</span>");
            } else {
                $countdown.countdown('destroy');
                $countdown.countdown({ until: endTimeMoment.toDate(), compact: true });
            }
        }
    };

    var updateUnitTimeCompleteFields = function (data) {
        for(var i=0; i < data.length; i++) {
            var id = data[i]['id'];
            var endTimeFormatted = data[i]['end_time_formatted'];
            $('#unit-time-complete-' + id).text(endTimeFormatted);
        }

    };


    // turn unit countdowns red once they fall below 00:05:00
    // also turn countdown into a gold --:--:-- when the queue is empty
    // this function receives a complete JSON dump as its argument from updatePage()
    var adjustCountdownColors = function(data) {
        unit_arr = data;
        var $countdowns = $('.time-remaining');
        for(var i=0; i < unit_arr.length; i++) {
            var id = unit_arr[i]['id'];
            var endTime = unit_arr[i]['time_available'];
            var endTimeMoment = moment(endTime);
            var redTime = moment().add(5, 'minutes')
            //var $countdown = $('#time-remaining-' + id);
            if(endTimeMoment > redTime) {
                $($countdowns[i]).removeClass('red-glow').addClass('gold-glow');
            } else if( redTime > endTimeMoment ) {
                $($countdowns[i]).removeClass('gold-glow').addClass('red-glow');
            } else if (isNaN(endTimeMoment) ) {
                $($countdowns[i]).removeClass('red-glow').addClass('gold-glow').find('span').text('--:--:--');
            }
        }
    };

    // remove unit-users once their end time is reached
    // this function receives a complete JSON dump as its argument from updatePage()
    var cleanUpUnitUsers = function(data) {
        // get list of unitUsersIds from database
        var unitUsers = getUnitUsers(data);
        var unitUserIds = _.pluck(unitUsers,'id');
        // then delete any on-screen unitUsers who are no longer part of that list
        var $unitUsers = $('li.unit_user');
        $unitUsers.each(function() {
            var id_str = $(this).attr('id');
            var id = parseInt(id_str.match(/\d+/)[0]);
            if(unitUserIds.indexOf(id) == -1) {
                $(this).fadeOut();
            }
        });
    };

    // update start_time, duration, end_time, and note for each unitUser on screen
    // this function receives a complete JSON dump as its argument from updatePage()
    var updateUnitUsers = function(data) {
        var unitUsersToUpdate = getUnitUsers(data);
        for(var i=0; i < unitUsersToUpdate.length; i++) {
            var beg = unitUsersToUpdate[i]['start_time_formatted'];
            var dur = unitUsersToUpdate[i]['duration_hrs_min'];
            var end = unitUsersToUpdate[i]['end_time_formatted'];
            var note = unitUsersToUpdate[i]['note'];
            $('#start_time_' + unitUsersToUpdate[i]['id']).html(beg);
            $('#end_time_'   + unitUsersToUpdate[i]['id']).html(end);
            $('#uu-dur-'     + unitUsersToUpdate[i]['id']).val(dur);
            $('#uu-note-'    + unitUsersToUpdate[i]['id']).val(note);
        }
    };

    // run disableUnit() on all units that are disabled, which currently turns them red
    // this function receives a complete JSON dump as its argument from updatePage()
    var markDisabledUnits = function(data) {
        for(var i=0; i < data.length; i++) {
            var id = data[i]['id'];
            var disabler = data[i]['user_disabler'];
            var when_disabled = data[i]['when_disabled'];
            if (data[i]['state'] == 'disabled') {
                disableUnit(id, disabler, when_disabled);
            } else if (data[i]['state'] == 'disabled') {
                enableUnit(id);
            }
        }
    };


    var setListenersOnUnitUsers = function(data) {
        var unitUsers = getUnitUsers(data);
        var id;
        for(var i = 0; i < unitUsers.length; i++) {
            id = unitUsers[i]['id'];
            setListenerOnDurationEditBtn(id);
        }
    };

    // provides an array of just unitUsers for updateUnitUsers() and cleanUpUnitUsers()
    // this function receives a complete JSON dump as its argument from the above functions
    var getUnitUsers = function(data) {
        var unitUsers = [];
        for(var i = 0; i < data.length; i++) {
            if(data[i]['unit_users'].length > 0) {
                unitUsers.push(data[i]['unit_users']);
            }
        }
        return _.flatten(unitUsers);
    };

    // listen for duration edit button clicks
    // this app is triggered by setListenersOnUnitUsers()
    var setListenerOnDurationEditBtn = function(id) {
        var $button = $('#submit-dur-' + id);
        if ($button.hasClass('listening')) return false;
        $button.off();
        $button.on('click', function() {
            var minutes = $('#uu-dur-' + id).val();
            $.ajax({
                url: '/unit_users/' + id + '/update_duration',
                type: 'PUT',
                data: 'minutes=' + minutes,
                success: function(data) {
                    console.log('data returned from setListenerOnDurationEditBtn is ' + JSON.stringify(data));
                    $('#uu-dur-' + id).val(data['duration_hrs_min']).blur();
                    updatePage();
                }
            });
            $button.addClass('listening');
        })

    };

    // checks to see if user is in the middle of an edit
    // (really just checks to see if any edit field is in a focus state)
    var editInProgress = function () {
        var durationEditInProgress = $('input.uu-duration-edit:focus').length > 0;
        var noteEditInProgress = $('textarea.uu-note-edit:focus').length > 0;
        return durationEditInProgress || noteEditInProgress;
    };

    var submitUnitUserNoteChanges = function(id) {
        noteText = $('#uu-note-' + id).val();
        $.ajax({
            url: '/unit_users/' + id + '/update_note',
            type: 'PUT',
            data: 'note=' + noteText,
            success: function(data) {
                console.log('data returned from submitUnitUserNoteChanges is ' + JSON.stringify(data));
                $('#uu-note-' + id).val(data).blur();
                //updatePage();
            }
        });
    };

    var prepareUserForm = function() {
        $("#phone").intlTelInput();
        $("#phone2").intlTelInput();
        // create an array of flags which tells which pieces of contact data are going to be active and visible
        // e.g., 0,1,1,0,0,0,1,1 or 1,1,1,1,0,0,0,0,

        var contactFlags = '<%= current_user.contact_flags %>'.split('');

        // loop through all contact buttons and set event listeners
        $('.contact-switch').each(function(i,el){
            console.log(i + ' ' + el);
            $(el).on('click', function() {
                if( contactFlags[i] == "1"){
                    contactFlags[i] = "0";
                    switchGlowOff(el);
                } else {
                    contactFlags[i] = "1";
                    switchGlowOn(el);
                }
                $('#contact-flags-' + <%= current_user.id %>).val(contactFlags.join(''));
            })
        });
    };

    var switchGlowOn = function(el) {
        $(el).removeClass('grayed-out').addClass('gold-glow');
    };

    var switchGlowOff = function(el) {
        $(el).addClass('grayed-out').removeClass('gold-glow');
    };

</script>