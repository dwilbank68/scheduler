<!DOCTYPE html>
<html>
<head>
  <title>Scheduler</title>
  <link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css">
  <%= stylesheet_link_tag    'application', media: 'all' %>
  <%= javascript_include_tag 'application' %>
  <%= csrf_meta_tags %>
  <!--<meta http-equiv="refresh" content="300">   &lt;!&ndash; until I get realtime push updates working &ndash;&gt;-->
  <meta charset="utf-8"/>
</head>
<body>

<ul class='nav nav-tabs'>
  <div id="clock" class="quicksand-light white-glow-dim larger spaced"></div>
  <div id="timezone" class="quicksand-light white-glow-dim lowered spaced"><%= current_user.timezone if current_user %></div>
  <div id="new-unit">
    <%= link_to("New Unit", new_unit_path, class: 'quicksand-light white-glow-dim spaced') %>
  </div>
  <div id="notice" class="notice gold-glow-no-bg quicksand-reg spaced"><%= notice %></div>
  <div id="alert"  class="alert   red-glow-no-bg quicksand-reg spaced"><%= alert %></div>
  <div class="pull-right user-info">
    <% if current_user %>
        <div class="quicksand-light spaced white-glow-dim" id="name-display"><%= current_user.name %></div>
        <%= image_tag(current_user.avatar.tiny.url) if current_user.avatar? %>
        <button id="edit-contact-preferences-link-<%= current_user.id %>" class="header-button quicksand-light spaced white-glow-dim">Edit Contact Preferences</button>
        <%= link_to edit_user_registration_path, class: 'btn btn-primary btn-sm' do %>
            <span class="glyphicon glyphicon-user"></span>
        <% end %>
        <%= link_to destroy_user_session_path, method: :delete, class: 'btn btn-primary btn-sm' do %>
            <span class="glyphicon glyphicon-log-out"></span>
        <% end %>
    <% else %>
        <%= link_to "Sign In", new_user_session_path %> or
        <%= link_to "Sign Up", new_user_registration_path %>
    <% end %>
  </div>

</ul>

<div id="blur-layer">
  <%= yield %>
</div>

<div id="overlay"></div>

<div id="non-blur-layer">
  <div class="container gruppo" id="user-edit-form">
    <div class="row">
      <div class="col-xs-12 spaced3-6 txt-centered"> <h2>Contact Preferences</h2> </div>
    </div>
    <% if current_user %>
        <%= simple_form_for current_user, defaults: {input_html: {class: 'quicksand-reg white-glow-dim', color: 'white'}} do |f| %>
            <div class="row"><div class="col-xs-12"><%= f.error_notification %></div></div>
            <div class="row border-bottom">
              <div class="col-xs-1"></div>
              <div class="col-xs-7"><%= f.input :name, label: false, placeholder: 'name', input_html: { :style => 'width: 260px'} %></div>
              <div class="col-xs-4 quicksand-reg txt-centered gold-glow                                  name-visible">always visible</div>
            </div>
            <div class="row border-bottom">
              <div class="col-xs-1"><i class="fa fa-envelope-o"></i></div>
              <div class="col-xs-7"> <p id="form-field-phone" class="quicksand-reg white-glow-dim"><%= current_user.email %></p> </div>
              <div class="contact-switch col-xs-2 quicksand-reg txt-right <%= contact_colors(current_user)[:email1_vis] %> email1-visible">visible</div>
              <div class="contact-switch col-xs-2 quicksand-reg txt-right <%= contact_colors(current_user)[:email1_act] %> email1-active">active</div>
            </div>
            <div class="row border-bottom">
              <div class="col-xs-1"><i class="fa fa-envelope-o"></i></div>
              <div class="col-xs-7"> <%= f.input :email2, label: false, placeholder: 'alternate email', input_html: {id: 'email2', :style => 'width: 260px'} %> </div>
              <div class="contact-switch col-xs-2 quicksand-reg txt-right <%= contact_colors(current_user)[:email2_vis] %> email2-visible">visible</div>
              <div class="contact-switch col-xs-2 quicksand-reg txt-right <%= contact_colors(current_user)[:email2_act] %> email2-active">active</div>
            </div>
            <div class="row border-bottom">
              <div class="col-xs-1"><i class="fa fa-phone-square"></i></div>
              <div class="col-xs-7"> <%= f.input :phone, label: false, placeholder: 'phone', input_html: {id: 'phone', :style => 'width: 260px'} %> </div>
              <div class="contact-switch col-xs-2 quicksand-reg txt-right <%= contact_colors(current_user)[:phone1_vis] %> phone1-visible">visible</div>
              <div class="contact-switch col-xs-2 quicksand-reg txt-right <%= contact_colors(current_user)[:phone1_act] %> phone1-active">active</div>
            </div>
            <div class="row border-bottom">
              <div class="col-xs-1"><i class="fa fa-phone-square"></i></div>
              <div class="col-xs-7"> <%= f.input :phone2, label: false, placeholder: 'alternate phone', input_html: {id: 'phone2', :style => 'width: 260px'} %> </div>
              <div class="contact-switch col-xs-2 quicksand-reg txt-right <%= contact_colors(current_user)[:phone2_vis] %> phone2-visible">visible</div>
              <div class="contact-switch col-xs-2 quicksand-reg txt-right <%= contact_colors(current_user)[:phone2_act] %> phone2-active">active</div>
            </div>
            <div class="row border-bottom">
              <div class="col-xs-12"><%= f.input :timezone, :collection => ActiveSupport::TimeZone.all, :label_method => :to_s, :value_method => :name, :selected => "Pacific Time (US & Canada)", :include_blank => false %>
              </div>
            </div>
            <div class="spacer"></div>
            <div class="spacer"></div>
            <% if current_user.avatar? %>
                <div class="row">
                  <div class="col-xs-6 current-avatar-label spaced"> Current Avatar </div>
                  <div class="col-xs-6 current-avatar-form-thumbnail"> <%= image_tag( current_user.avatar.profile.url ) %> </div>
                </div>
            <% end %>
            <div class="row border-bottom">
              <div class="col-xs-6 gruppo spaced white-glow-dim"> <%= f.file_field :avatar %> </div>
            </div>
            <%= f.hidden_field :avatar_cache %>
            <%= f.input :contact_flags, :as => :hidden, :input_html => { :value => current_user.contact_flags, :id => 'contact-flags-' + current_user.id.to_s } %>
            <div class="row">
              <div class="col-xs-12"> <%= f.error :base %> </div>
            </div>
            <div class="spacer"></div>
            <div class="txt-centered spaced"><%= f.button :submit, :class => 'update-user spaced' %></div>
            <div class="spacer"></div>
        <% end %>
    <% end %>
  </div>
</div> <!-- where the modal form attaches -->


</body>
</html>


<script>

    $(document).ready(function() {

        NUM_OF_CONTACT_LIGHTS = 8;

        // make textareas stretch to fit content
        $('.uu-note-edit').elastic();

        // set listener on "Edit Contact Preferences" in the upper right nav bar
        <% if current_user %>
            $('#edit-contact-preferences-link-<%= current_user.id %>').on('click', function(){
                fadeInUserForm();
            });

            $('.edit-user-link').on('click', function(){
                removeDarkBlurOverlay();
                updateUsersGfx();
                fadeInUserForm();
            });

            $('.edit_user').on('submit', function(e) {
                e.preventDefault();
                var contactsObj = {
                    'name': $('#user_name').val(),
                    'email': '<%= current_user.email %>',
                    'email2': $('#email2').val(),
                    'phone': $('#phone').val(),
                    'phone2': $('#phone2').val(),
                    'timezone': $('#user_timezone').val(),
                    'contact_flags': $('#contact-flags-<%= current_user.id %>').val(),
                    'user[avatar]': $('#user_avatar')[0].files[0]
                };
                var formData = new FormData();
                for (var key in contactsObj) {
                    formData.append(key, contactsObj[key]);
                }
                $.ajax({
                    url : '/users/3/update_contact_prefs',
                    type: "PUT",
                    data: formData,
                    cache: false,
                    contentType: false,
                    processData: false,
                    success: function (userData) {
                        updateUsersGfx();
                        fadeOutUserForm();
                        updatePage();
                        updateNavBar(userData['avatar']);
                        updateFormAvatarThumbnail(userData['avatar']);
                    },
                    error: function (jXHR, textStatus, errorThrown) {
                        alert(errorThrown);
                    }
                });
            });


        <% end %>


        updatePage();
        updateUsersGfx();
        setInterval(updatePage,15000);
    });

    var removeDarkBlurOverlay = function () {
        $('#blur-layer').removeClass('blur-in').addClass('blur-out');
        $('#overlay, .unit_user_form, #user-edit-form').fadeOut();
    };

    var fadeInUserForm = function () {
        var $user_form = $('#user-edit-form');
        // detach form from machine unit and reattach it to non-blurring layer, which is z-index 2
        $('#non-blur-layer').append($user_form);
        // blur the container which holds all the machines ( z-index 0)
        $('#blur-layer').removeClass('blur-out').addClass('blur-in');
        // bring in the tinted overlay to prevent click-through
        $('#overlay').fadeIn();
        // bring in the form, which SHOULD BE Z-INDEX 3
        $user_form.fadeIn().css({top:($(window).height()/2)-171, left:($(window).width()/2)-250, zIndex:999});
    };

    var fadeOutUserForm = function () {
        $('#blur-layer').addClass('blur-out').removeClass('blur-in');
        $('#overlay, #user-edit-form').fadeOut();
    };

    var updateNavBar = function(avatar) {
        $('.user-info img').attr('src', avatar.avatar.tiny.url);
    };

    var updateFormAvatarThumbnail = function(avatar) {
        $('.current-avatar-form-thumbnail img').attr('src', avatar.avatar.profile.url);
    };



    var updatePage = function() {
//        refreshAllUnits();
        $.ajax({
            url: "/units/unit_statuses",
            type: "GET",
            dataType: "json",
            success: function (data) {
                if (editInProgress()) {
                    console.log('edit in progress - skipping updatePage');
                } else {
                    startUnitCountdowns(data);
                    updateUnitTimeCompleteFields(data);
                    adjustCountdownColors(data);
                    refreshUnitUsers(data);
                    markDisabledUnits(data);
                    setListenersOnUnitUsers(data);
                }
            },
            error: function () {
                console.log('ajax error in #updatePage');
            }
        })
        // make new textareas stretch to fit content
        $('.uu-note-edit').elastic();
    };



    // set current values for all Unit countdown displays
    // this function receives a complete JSON dump as its argument from updatePage()
    var startUnitCountdowns = function(data) {
        unit_arr = data;
        for(var i=0; i < unit_arr.length; i++) {
            var id = unit_arr[i]['id'];
            var endTime = unit_arr[i]['time_available'];
            var endTimeMoment = moment(endTime);
            var $countdown = $('#time-remaining-' + id);
            if(endTime === null) {
                $countdown.countdown('destroy');
                $countdown.html("<span>--:--:--</span>");
            } else {
                $countdown.countdown('destroy');
                $countdown.countdown({ until: endTimeMoment.toDate(), compact: true });
            }
        }
    };

    var updateUnitTimeCompleteFields = function (data) {
        for(var i=0; i < data.length; i++) {
            var id = data[i]['id'];
            var endTimeFormatted = data[i]['end_time_formatted'];
            $('#unit-time-complete-' + id).text(endTimeFormatted);
        }
    };


    // turn unit countdowns red once they fall below 00:05:00
    // also turn countdown into a gold --:--:-- when the queue is empty
    // this function receives a complete JSON dump as its argument from updatePage()
    var adjustCountdownColors = function(data) {
        unit_arr = data;
        var $countdowns = $('.time-remaining');
        for(var i=0; i < unit_arr.length; i++) {
            var id = unit_arr[i]['id'];
            var endTime = unit_arr[i]['time_available'];
            var endTimeMoment = moment(endTime);
            var redTime = moment().add(5, 'minutes')
            //var $countdown = $('#time-remaining-' + id);
            if(endTimeMoment > redTime) {
                $($countdowns[i]).removeClass('red-glow').addClass('gold-glow');
            } else if( redTime > endTimeMoment ) {
                $($countdowns[i]).removeClass('gold-glow').addClass('red-glow');
            } else if (isNaN(endTimeMoment) ) {
                $($countdowns[i]).removeClass('red-glow').addClass('gold-glow').find('span').text('--:--:--');
            }
        }
    };

    // this function receives a complete JSON dump as its argument from updatePage()
    var refreshUnitUsers = function(data) {
        for(var i = 0; i < data.length; i++) {
            refreshUnitUser(data[i]);
        }
    };

    // this function takes a unit object as argument and is normally called by refreshUnitUsers
    var refreshUnitUser = function (unit) {
        // console.log(JSON.stringify( unit, null, '  '));
        var $unitUserUL = $('#unit-user-ul-' + unit['id']);
        $unitUserUL.empty();
        var source = $("#uu-template").html();
        var template = Handlebars.compile(source);
        if(JSON.stringify(unit['unit_users']) != "[]") {
            console.log(JSON.stringify( unit['unit_users'], null, '  '));
            var queue = unit['unit_users'];
            for (var i = 0; i < queue.length; i++) {
                var context = {
                    unitId:                 queue[i]['unitId'],
                    id:                     queue[i]['id'],
                    name:                   queue[i]['name'],
                    img:                    queue[i]['img'],
                    email:                  queue[i]['emailFormatted'],
                    email2:                 queue[i]['email2Formatted'],
                    phone:                  queue[i]['phoneFormatted'],
                    phone2:                 queue[i]['phone2Formatted'],
                    start:                  queue[i]['start'],
                    start_time_formatted:   queue[i]['start_time_formatted'],
                    duration_string:        queue[i]['duration_hrs_min'],
                    end_time_formatted:     queue[i]['end_time_formatted'],
                    note:                   queue[i]['note'],
                    current_user_name:      '<%= current_user.name %>'
                };
                var html = template(context);
                $unitUserUL.append(html);

            }
        }
    };

    // runs disableUnit() on all units that are disabled, which currently turns them red
    // this function receives a complete JSON dump as its argument from updatePage()
    var markDisabledUnits = function(data) {
        for(var i=0; i < data.length; i++) {
            var id = data[i]['id'];
            var disabler = data[i]['user_disabler'];
            var when_disabled = data[i]['when_disabled'];
            if (data[i]['state'] == 'disabled') {
                disableUnit(id, disabler, when_disabled);
            } else if (data[i]['state'] == 'disabled') {
                enableUnit(id);
            }
        }
    };

    var setListenersOnUnitUsers = function(data) {
        var unitUsers = getUnitUsers(data);
        var id;
        for(var i = 0; i < unitUsers.length; i++) {
            id = unitUsers[i]['id'];
            setListenerOnDurationEditBtn(id);
            setListenersOnDurationField(id);
            setListenersOnNoteField(id);
            setListenerOnDeleteButton(id);
        }
    };

    // provides an array of unitUser objects for updateUnitUsers() and cleanUpUnitUsers()
    // this function receives a complete JSON dump as its argument from the above functions
    var getUnitUsers = function(data) {
        var unitUsers = [];
        for(var i = 0; i < data.length; i++) {
            if(data[i]['unit_users'].length > 0) {
                unitUsers.push(data[i]['unit_users']);
            }
        }
        return _.flatten(unitUsers);
    };

    // listen for duration edit button clicks
    // this function is triggered by setListenersOnUnitUsers()
    var setListenerOnDurationEditBtn = function(id) {
        var $button = $('#submit-dur-' + id);
        if ($button.hasClass('listening')) return false;
        $button.off();
        $button.on('click', function() {
            var minutes = $('#uu-dur-' + id).val();
            $.ajax({
                url: '/unit_users/' + id + '/update_duration',
                type: 'PUT',
                data: 'minutes=' + minutes,
                success: function(data) {
                    console.log('data returned from setListenerOnDurationEditBtn is ' + JSON.stringify(data));
                    $('#uu-dur-' + id).val(data['duration_hrs_min']).blur();
                    updatePage();
                }
            });
            $button.addClass('listening');
        })
    };

    // this function is triggered by setListenersOnUnitUsers()
    var setListenersOnDurationField = function(id) {
        var $durField = $('#uu-dur-' + id);
        $durField.tooltip({ content:"enter number of minutes, i.e. for 2 hours, enter 120. Hit shift-return to submit" });
        if ($durField.hasClass('listening')) return false;

        var $button = $('#submit-dur-' + id);
        var durVal;

        $durField.off();
        // return key submits your new duration value
        $durField.on('keyup', function (e) {
            if (e.which == 13) {
                $button.click();
            }
        });
        $durField.on('focus', function() {
            console.log('focused');
            durVal = $(this).val();
            $(this).val('');
        });
        $durField.on('blur', function() {
            console.log('blurred');
            $(this).val(durVal);
        });
        $durField.addClass('listening');
    };

    // this function is triggered by setListenersOnUnitUsers()
    var setListenersOnNoteField = function(id) {
        var $noteField = $('#uu-note-' + id);
        if ($noteField.hasClass('listening')) return false;

        $noteField.bind('keydown', 'Shift+return', function() {
            var noteText = $(this).val();
            console.log('submitting?');
            $.ajax({
                url: '/unit_users/' + id + '/update_note',
                type: 'PUT',
                data: 'note=' + noteText,
                success: function(data) {
                    console.log('data coming back is ' + JSON.stringify(data));
                    $noteField.val(data['note']);
                    $noteField.blur();
                }
            })
        });
        $noteField.addClass('listening');
    };

    // this function is triggered by setListenersOnUnitUsers()
    var setListenerOnDeleteButton = function(id) {
        var $deleteButton = $('#delete-' + id);
        var $unitUser = $('#unit_user_' + id);
        if ($deleteButton.hasClass('listening')) return false;
        
        $deleteButton.on('click', function () {
            if(confirm('Are you sure?')) {
                $.ajax({
                    url: '/unit_users/' + id,
                    type: 'DELETE',
                    success: function() { $unitUser.fadeOut() },
                    error: function() { console.log('error in deletion'); }
                })
            } else {
                return false;
            }
        });

        $deleteButton.addClass('listening');
    };

    // checks to see if user is in the middle of an edit
    var editInProgress = function () {
        var durationEditInProgress = $('input.uu-duration-edit:focus').length > 0;
        var noteEditInProgress = $('textarea.uu-note-edit:focus').length > 0;
        var contactEditInProgress = $('#user-edit-form').is(':visible');
        return durationEditInProgress || noteEditInProgress || contactEditInProgress;
    };


    var setListenersOnContactSwitches = function () {
        $.ajax({
            url: '/users/' + <%= current_user.id %> + '/update_contact_prefs',
            type: 'GET',
            dataType: 'json',
            data: contactsObj,
            success: function(data) {
                console.log(JSON.stringify("data-contact_flags is " + data['contact_flags']));
                updateUsersGfx();
            },
            error: function(error) {
                console.log(JSON.stringify(error));
            }
        });
    }

    var updateUsersGfx = function() {
        $.ajax({
            url: '/users/get_users',
            type: 'GET',
            dataType: 'json',
            success: function(data) {
                setContactLightStates(data);
                prepareUserForm(data);
            },
            error: function() { console.log('error calling /users/get_data'); }
        })
    };

    var prepareUserForm = function(data) {
        console.log('prepareUserForm is called');
        $("#phone").intlTelInput();
        $("#phone2").intlTelInput();
        var email = $('#form-field-phone').html();
        $('#form-field-phone').on({
            mouseenter: function() { $(this).html('primary email cannot be changed')},
            mouseleave: function() { $(this).html(email) }
        });
        // create an array of flags which tells which pieces of contact data are going to be active and visible
        // e.g., 0,1,1,0,0,0,1,1 or 1,1,1,1,0,0,0,0,

        var contactFlags;
        for( var i=0; i < data.length; i++) {
            if (<%= current_user.id %> == data[i]['id'])  contact_flags = data[i]['contact_flags'];
        }
        contactFlags = contact_flags.split('');
        // loop through all contact buttons and set event listeners
        $('.contact-switch').each(function(i,el){
            $(el).off();
            $(el).on('click', function() {
                if( contactFlags[i] == "1"){
                    contactFlags[i] = "0";
                    $('#contact-flags-' + <%= current_user.id %>).val(contactFlags.join(''));
                    if ($('#contact-flags-' + <%= current_user.id %>).val()[i] == "0" ) {
                        switchGlowOff(el);
                    }
                } else if(contactFlags[i] == "0") {
                    contactFlags[i] = "1";
                    $('#contact-flags-' + <%= current_user.id %>).val(contactFlags.join(''));
                    if ($('#contact-flags-' + <%= current_user.id %>).val()[i] == "1" ) {
                        switchGlowOn(el);
                    }
                } else {
                    console.log('this are going awry');
                }
            })
        });
    };

    var setContactLightStates = function(data) {
        //get current_user's contact flags from database
        var contact_flags;
        for( var i=0; i < data.length; i++) {
            if (<%= current_user.id %> == data[i]['id'])  contact_flags = data[i]['contact_flags'];
        }

        var contactFlagsArr = contact_flags.split('');

        var num = NUM_OF_CONTACT_LIGHTS;
        $('.contact-light').each(function(i, el) {
            if(contactFlagsArr[i % num] == "1") {
                switchGlowOn($(el));
            } else if(contactFlagsArr[i % num] == "0") {
                switchGlowOff($(el));
            }
        })
    };

    var switchGlowOn = function(el) {
        $(el).removeClass('grayed-out').addClass('gold-glow');
    };

    var switchGlowOff = function(el) {
        $(el).addClass('grayed-out').removeClass('gold-glow');
    };

</script>